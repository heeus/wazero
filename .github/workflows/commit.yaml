name: Test
on: 
  pull_request:
    branches: [main]
  push:
    branches: [main]    

  
env:  # Update this prior to requiring a higher minor version in go.mod
  GO_VERSION: "1.17"  # 1.xx == latest patch of 1.xx

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  check:
    name: Pre-commit check
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v3
        with:
          # TODO: Change to a matrix to ensure developers can use the latest version, noting often there is a lag of
          # weeks before the latest version is usable. Ex. golangci/golangci-lint#2649
          go-version: ${{ env.GO_VERSION }}

      - name: Install latest wast2json
        run: |  # Needed for build.spectest. wabt includes wast2json.
          wabt_version=1.0.28
          wabt_url=https://github.com/WebAssembly/wabt/releases/download/${wabt_version}/wabt-${wabt_version}-ubuntu.tar.gz
          curl -sSL ${wabt_url} | tar --strip-components 2 -C /usr/local/bin -xzf - wabt-${wabt_version}/bin/wast2json

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: check-${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'Makefile') }}

      - run: make check

      - run: make build.spectest

  test_amd64:
    name: ${{ matrix.os }}, Go-${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are arch/OS specific
      matrix:  # use latest available versions and be consistent on all workflows!
        os: [ubuntu-20.04]
        go-version: 
        - "1.17"  # == ${{ env.GO_VERSION }} because matrix cannot expand env variables

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: test-${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}

      - run: make test


  bench:
    name: Benchmark
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      # Unlike the other CGO libraries, WasmEdge requires offline installation.
      - name: Install WasmEdge
        run: |
          wget -qO- https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | sudo bash -s -- -p /usr/local -e all -v ${WASMEDGE_VERSION}
        # The version here is coupled to internal/integration_test/go.mod, but it
        # isn't always the same as sometimes the Go layer has a broken release.
        env:
          WASMEDGE_VERSION: 0.9.1

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: bench-${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

      - run: make bench.check
